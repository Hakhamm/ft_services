# set user that workers will use
user                            www;
# Number of NGINX workers. Usually it's set, at maximum, 1 worker per CPU core.
# If the server has 2+ CPU cores but it still does not receive many requests, 
# it's a good idea to keep the value to 1 so it will avoid creating idle processes.
worker_processes                auto;

error_log                       /var/log/nginx/error.log warn;
# NGINX's master process id.
pid                             /var/run/nginx/nginx.pid;

events {
	# How many client connections each worker can maintain at a time.
    worker_connections          1024;
	# Using epoll is less CPU intensive when you have to serve thousands of connections, because
	# instead of scanning all connections to see which file descriptor is ready to read/write,
	# it will only scan those which are active.
	# p.s.: It's only available in Linux kernels later than 2.6.
  use epoll;
}

http {
	# You can include other config files using the "include" directive.
	# Here we are including the mime-types, for example.
	include /etc/nginx/mime.types;
	# The "application/octet-stream" means that the response is a binary file.
	# If this directive is not defined then response will be set to "text/plain" by default.
	default_type  application/octet-stream;

	# Optimizes data transfer copying data between one file descriptor and another
	# instead of reading and copying data to/from user space.
    sendfile                    on;
	# Access log: path and type.
	access_log  /var/log/nginx_access.log;
	# Error log: path and type.
	error_log  /var/log/nginx_error.log debug;
	# Timeout during which a keep-alive client connection will stay open to serve 
	# all the requested files from the server side.
    keepalive_timeout           30s;

	server {
        ssl_certificate /etc/ssl/certs/cer.crt;
		ssl_certificate_key /etc/ssl/certs/key.key;

        listen 443 ssl ;
        listen [::]:443 ssl ;

        listen 80;
        listen [::]:80;

        server_name _;

        root /var/www/html;
        index index.html index.php;

        location / {
        	# autoindex on;
            try_files $uri $uri/ =404;
        }

		location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		fastcgi_pass unix:/run/php/php7.4-fpm.sock;
		}

    }
}

# 	server{

# 	# If the file exists as a static file, it won't check the other conditionals 
#       if (-f $request_filename) { 
#         break; 
#       }

#       # Checks for index.html then rewrite
#       # the URL to add "/index.html" to the end of it.
#       if (-f $request_filename/index.html) {
#         rewrite (.*) $1/index.html break;
#       }

#       # Append the ".html" to the end of the URL and then checks
#       # the file system for that file. If it exists, then it
#       # rewrites the URL to have explicit ".html" on its end.
#       if (-f $request_filename.html) {
#         rewrite (.*) $1.html break;
#       }

#       # If there is no file on the file system then it sets all the 
#       # necessary headers and proxies to the Thin upstream.
#       if (!-f $request_filename) {
#         # Here's where the magic happens!
#         proxy_pass http://thin;
#         # Uncomment or define another virtual horst (server directive)
#         # to serve and test the upstream w/ Unix sockets.
#         # proxy_pass http://puma; 
#         break;
#       }
# 	}
# }
